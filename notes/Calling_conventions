Calling conventions
================================================================================

Register descriptions
--------------------------------------------------------------------------------

- All contexts can use r8-r15. r0-7 are reserved to reset context code, i0-i7 to
IRQ context code and n0-7 to NMI context code.
- r8-r15 are callee-saved registers: The callee must preserve contents of these
registers if it want to use them and restore them when returning from
subroutine.
- r0-r7, i0-i7, n0-n7 are parameters/scratch variables that reset, IRQ and NMI
code can freely use, respectively. They are caller-saved registers that can
also used to pass parameters/return values; because the callee can tamper any
of these registers, the content of these registers are undefined when callee 
returns unless they hold return value(s) (See parameter passing and return 
values).
- 6502 registers A, X, Y and P are caller-saved registers, too. They can also
be used to pass parameters/return values. 6502 register S however is a
callee-saved register, meaning that S must be exactly the same before and after
a subroutine call (See parameter passing and return values).
- Reset code shall not call IRQ-context routines nor NMI-context routine. IRQ
code shall not call NMI-context routines. NMI code shall not call IRQ-context
routines. IRQs shall not be enabled inside IRQ code. NMI- and IRQ-context code
shall not call reset-context code unless r0-r7 are preserved beforehand and
restored before returning from NMI/IRQ. IRQ and NMI code shall preserve A,X and
Y registers (P is already preserved) and restore them before returning from 
IRQ/NMI. Undefined behavior results if any of the above is not observed.
- Exported user and library functions shall obey calling convention rules.
Internal and private functions, however, may disregard any or all rules, except
the previous point, and the only requirement is that the overall observed 
behavior of the exported user/library function that called private/internal
functions appears to observe calling conventions.


Passing parameters and return values
================================================================================

- If the number of parameters are between 1 and 3 inclusive, and they are all 
byte-sized, then parameters are placed in A, X and Y, in that order. Otherwise,
parameters are placed in sequencial registers locations r0-r7; any additional 
parameters are placed on the stack, last parameter pushed first. Proper
endianness shall be observed: a word (or any bigger number) shall have the
lsbyte closer to the top of stack; that means that the lsbyte is pushed last.
- A variadic function is a function with an unspecified number of parameters.
A variadic function can have 0 or more defined parameters; the defined 
parameters are allocated as the previous rule dictates, and the variadic
parameters themselves are always placed on stack, with the same order specified
in the previous rule. That means that a function with 1 byte-sized argument and
a variadic list of parameter will have the first argument in A and the rest on
the stack.
- Return values are placed in r0-r7, and if the first return value is
byte-sized, it is placed in A. That means that a function returning a byte-sized
and a word-sized values, then the byte-sized value is in A and the word-sized
value is in r0-r1. If the order of return values were reversed, they would all
end up in r0-r2, r2 being the byte-sized return value.
- All of the above applies only to reset-context code; for IRQ- or NMI-context
code, the only difference is that parameters and return values use their
respective scratch registers (i0-i7/n0-n7) instead of r0-r7. Otherwise, the
same rules apply.
